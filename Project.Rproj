Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX
###############################################################################
# Simulated example for Cointegration, based on Hamilton (1994)
# 
# Author: Tamas Vadasz
###############################################################################

#Modify plot parameters
par(font.axis=2, font.lab=2)


#generate the two time series of length 1000

set.seed(20140623)			#fix the random seed
N <- 1000					#define length of simulation
x <- cumsum(rnorm(N))		#simulate a normal random walk
gamma <- 0.7				#set an initial parameter value
y <- gamma * x + rnorm(N)	#simulate the cointegrating series
plot(x, col="blue", type='l', lwd=2, ylab='simulated values')	 		#plot the two series
lines(y,col="red", lwd=2)												#***2078OT__01_01.png***
legend(50,30,c("x","y"),lty=c(1,1), lwd=c(2.5,2.5),col=c("blue","red")) 

#------------------------------

#statistical tests

install.packages('urca')
library('urca')

#ADF test for the simulated individual time series
	#NULL: unit root exists
	#reject NULL if test-statistic < critical value

summary(ur.df(x,type="none"))	
summary(ur.df(y,type="none"))	

#------------------------------

z <- y - gamma * x				#take a linear combination of the series
plot(z,type='l')				#***2078OT__01_02.png***
summary(ur.df(z,type="none"))	

#------------------------------


#Estimate the cointegrating relationship
coin <- lm(y ~ x -1)		#regression without constant
coin$resid					#obtain the residuals
summary(ur.df(coin$resid))	#ADF test of residuals

Basic Addistion
a=1
b =2
d =3
c=a+b+d
c




Kevin's Code for File Aggregation

setwd("~/Desktop/US Internship & Work/BW Research Partnership/Forecasting Model Data/Variable data")
library(dplyr)

P_ele <- read.csv("Average_retail_price_of_electricity_monthly.csv", header = FALSE) #price in cents per kilowatthour
Gen_ele <- read.csv("Net_generation_all_sectors_monthly.csv",header = TRUE)
Gen_utl <- read.csv("Net_generation_all_fuels_(utility-scale)_all_sectors_monthly.csv",header = TRUE)
Sol_prod <- read.csv("Solar Production.csv",header = TRUE)
colnames(Sol_prod)[1]<-"Month"
Inv <- read.csv("MA Investments Data.csv",header = TRUE)
Med_Inc <- read.csv("Med Income.csv",header = TRUE)
Fun_Edu <- read.csv("Fed+State Funding.csv",header = TRUE)
Gov_Inc <- read.csv("Govt Incentives.csv",header = TRUE)


#For Net Generation All Sectors Data
Year<-as.Date(Gen_ele$Month,"%Y")
Gen_ele$Year<-Year
Gen_ele$Year<-format(Year,"%Y")
Gen_ele_MA<-Gen_ele[c(31,1,18,19,20,21,22,23,24,25,26,27,28,29,30)]
Gen_ele_MA[is.na(Gen_ele_MA)] <- 0
Gen_ele_MA_yr<-group_by(Gen_ele_MA, Year)
Gen_ele_subset<-Gen_ele_MA_yr[c(1,15)]
Gen_ele_subset["Total Renewables"] <-NA
Gen_ele_subset$`Total Renewables`<-Gen_ele_MA$Total.MA-Gen_ele_MA$Coal.1-Gen_ele_MA$petroleum.liquids-Gen_ele_MA$natural.gas.1-Gen_ele_MA$nuclear.1
Gen_ele_MA_yr_total <- aggregate(. ~Year,Gen_ele_subset,sum)
colnames(Gen_ele_MA_yr_total) <- c("Year","Total MA","Total Renewables")

#For Net Generation All Sectors Data

#For Government Incentives

#For Fed Fund for Education Institution
Fun_Edu_Total <-Fun_Edu[c(1,61)]
colnames(Fun_Edu_Total) <- c("Year","Fund Total")
